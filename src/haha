
parser tokens:
    @ program
    @     declaration* EOF
    
    statements: []
    index: 0

    is-at-end:
        exit tokens.index.kind = "EOF"
    
    is-current-token-kind token-type:
        exit tokens.index.kind = token-type
    
    is-next-token-kind token-type:
        exit tokens.(index - 1).kind = token-type
    
    is-previous-token-kind token-type:
        exit tokens.(index + 1).kind = token-type
    
    statement:
        @ expression-statement |
        @ loop-statement       |
        @ when-statement       |
        @ exit-statement       |
        @ block
        
        when is-current-token-kind "loop"
            exit loop-statement
        then is-current-token-kind "when"
            exit when-statement
        then is-current-token-kind "exit"
            exit return-statement
        then is-current-token-kind "indent"
            exit block
        then
            exit expression-statement
    
    declaration:
        @ function-declaration | 
        @ variable-declaration |
        @ statement
        
        when is-current-token-kind "colon" 
            when is-previous-token-kind "function-identifier"
                exit function-declaration
            then is-previous-token-kind "variable-identifier"
                exit variable-declaration
        then
            exit statement
        
    loop !is-at-end
        insert statements, declaration
        index = index + 1

    exit statements










interface
header
master
locker
locker
    header
    master
    footer
footer
    [loop] box
        [when] image 
        [then] box          
            text
            shape
        text



TodoList:
    tasks: []
    new-task: ""
    
    AddTask:
        when (Trim new-task) != ""
            Insert tasks, new-task
            new-task = ""
    
    RemoveTask index:
        Remove tasks, index

    exit <
        Element 
            Heading1
                text.content: "To-Do List" 
            
            InputText
                input.value::new-task
                event.keypress: ["Enter", AddTask]
                input.placeholder: "Add a task"
            
            ListUnordered 
                Item {loop tasks with [task, index]}
                    text.content: task
                    
                    Button
                        event.click: {RemoveTask index}
    >








<div id="app">
    <h1>To-Do List</h1>
    <input v-model="newTask" @keyup.enter="addTask" placeholder="Add a task" />
    <ul>
        <li v-for="(task, index) in tasks" :key="index">
            {{ task }}
            <button @click="removeTask(index)">Remove</button>
        </li>
    </ul>
</div>

<script>
    const app = Vue.createApp({
        data() {
            return {
                newTask: '',
                tasks: []
            };
        },
        methods: {
            addTask() {
                if (this.newTask.trim()) {
                    this.tasks.push(this.newTask);
                    this.newTask = '';
                }
            },
            removeTask(index) {
                this.tasks.splice(index, 1);
            }
        }
    });

    app.mount('#app');
</script>










