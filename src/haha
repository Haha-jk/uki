
parser tokens:
    @ program
    @     declaration* EOF
    
    statements: []
    index: 0

    is-at-end:
        exit tokens.index.kind = "EOF"
    
    is-current-token-kind token-type:
        exit tokens.index.kind = token-type
    
    is-next-token-kind token-type:
        exit tokens.(index - 1).kind = token-type
    
    is-previous-token-kind token-type:
        exit tokens.(index + 1).kind = token-type
    
    statement:
        @ expression-statement |
        @ loop-statement       |
        @ when-statement       |
        @ exit-statement       |
        @ block
        
        when is-current-token-kind "loop"
            exit loop-statement
        then is-current-token-kind "when"
            exit when-statement
        then is-current-token-kind "exit"
            exit return-statement
        then is-current-token-kind "indent"
            exit block
        then
            exit expression-statement
    
    declaration:
        @ function-declaration | 
        @ variable-declaration |
        @ statement
        
        when is-current-token-kind "colon" 
            when is-previous-token-kind "function-identifier"
                exit function-declaration
            then is-previous-token-kind "variable-identifier"
                exit variable-declaration
        then
            exit statement
        
    loop !is-at-end
        insert statements, declaration
        index = index + 1

    exit statements










calculator:
    display-value: ""
    
    append-to-display value:
        display-value = "|display-value||value|"
    
    clear-display:
        display-value = ""
    
    calculate-result:
        when
            display-value = evaluate display-value
        then
            display-value = "Error"
    
    
    white-text: <
        text.colour: colours.white
    >
    
    button = <
        button
            box.size-y: 60
            box.colour: "#ddd"
            box.corner: 5
            text.size: 22
            misc.cursor: "pointer"
            transition: ["box.colour", "0.2s"]
            state.active: {self.box.colour: "#bbb"}
            event.click: {append-to-display self.text.content}
    >
    
    operator: <
        white-text
            box.colour: colours.blue
    >
    
    exit <
        box.size-x: 320
        box.colour: colours.white
        box.space-inner: 20
        box.corner: 10
        box.shadow: 0 4 10 rgba(0, 0, 0, 0.2)
    
        input
            input.type: "text"
            input.editable: wrong
            input.value::display-value
            text.align: right
            text.size: 28
            box.size-x: 100%
            box.size-y: 60
            box.space-inner: 10
            box.space-outer-y-max: 10
            box.colour: #eee
            box.corner: 5
            
        element
            display: grid
            grid-template-columns: repeat(4, 1fr)
            gap: 8
            
            button
                text.content: "7"
            button 
                text.content: "8"
            button 
                text.content: "9"
            button operator
                text.content: "/"
    
            button 
                text.content: "4"
            button 
                text.content: "5"
            button 
                text.content: "6"
            button operator
                text.content: "*"
    
            button 
                text.content: "1"
            button 
                text.content: "2"
            button 
                text.content: "3"
            button operator
                text.content: "-"
    
            button white-text
                text.content: "C"
                event.click = {clear-display}
                box.colour: "#dc3545"
            button 
                text.content: "0"
            button white-text
                text.content: "="
                event.click = {calculate-result}
                box.colour: "#dc3545"
            button operator
                text.content: "+"
    >


render <
    origin
        meta.title: "Calculator"
        text.fonts: ["Arial", "sans-serif"]
        box.colour: "#f4f4f4"
        
        calculator
>






is-prime num:
    when num !> 1
        exit wrong
    then num = 2
        exit right
    then (remainder num, 2) = 0
        exit wrong

    loop 3_(power num, 0.5)_2 with i
        when (remainder num, i) = 0
            exit wrong
    
    exit right


print-prime num-1, num-2:
    when num-1 > num-2
        write "Invalid range! First number should be smaller than or equal to the second."
        exit

    write "Prime numbers in range [|num-1|, |num2|]:"
    loop num-1_num-2 with num
        when is-prime num
            write num


num-1: number prompt "What's your 1st number"
num-2: number prompt "What's your 2nd number"

print-prime num-1, num-2















