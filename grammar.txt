
example syntax 
```
is-prime num: 
    when num !> 1
        exit wrong
    then num = 2
        exit right
    then (remainder num, 2) = 0
        exit wrong

    loop 3_(power num, 0.5)_2 with i
        when (remainder num, i) = 0
            exit wrong
    
    exit right


print-prime num-1, num-2: 
    write "Prime numbers in range [|num-1|, |num2|]:"
    loop num-1_num-2 with num
        when is-prime num
            write num


num-1: number prompt "What's your 1st number" 
num-2: number prompt "What's your 2nd number"

print-prime num-1, num-2
```



basic structure is kind of like this
- program ::= statements

- statement
    - declaration (identifier contain value)
    - loop-statement (like standard for loop)
    - when-statement (like if, else, else if)
    - values (just lying around)


uki is white space sensitive like python or nim and doesn't require ";"s 
it also doesn't requ

uki consists of 3 types of type of data
- values
    - number 
    - string 
    - boolean
- instruction
    - program inside curly braces or indent and dedent tokens (basically they are like first class functions)
- structure
    - object 
    - array 

 






program
    declaration

declaration
    identifier ":" value


statement
    expression-statement            |
    loop-statement                  |
    when-statement                  |
    exit-statement                  |
    quit-statement                  |
    skip-statement                  |
    variable-reassignment-statement |
    function-reassignment-statement |
    block

block
    Indent declaration* Dedent

expression-statement
    expression header-end

exit-statement
    "exit" expression? header-end

quit-statement
    "exit" expression? header-end

skip-statement
    "exit" expression? header-end

expression
    logic-or

variable-assignment 
    ( call "." )? variable-identifier "=" expression

logic-or
    logic-and ( "?" logic-and )*

logic-and
    equality ( "&" equality )*

equality
    comparison ( ( "!=" | "=" ) comparison )*

comparison
    term ( ( ">" | ">!" | "<" | "!<" ) term )* 

term
    factor (("+" | "-") factor)*

factor
    unary (("*" | "/") unary)*

unary
    ("-" | "!") function-call

function-call
    primary arguments?

primary
    string | number | boolean | identifier

string
    single-line-string |
    multi-line-string
    
single-line-string 
    "\"" single-line-string-character* "\""

multi-line-string
    "\"" new-line (indent multi-line-string-character* dedent)? "\""

number
    integer-number | decimal-number

multi-line-string-character
    @ any printable character including escape-sequence

single-line-string-character
    @ any printable character including escape-sequence, excluding unescaped inverted commas and unescaped newline

escape-sequence
    "\\" ("\"" | "n" | "t" | "\\")

integer-number
    ("-")? digit+
 
decimal-number   
    ("-")? integer-number "." digit+

boolean 
    "right" | "wrong"

identifier
    function-identifier |
    variable-identifier |
    variable-identifier ("." variable-identifier)*

variable-identifier
    small-letter+ ("-" small-letter+ | digit*)*

function-identifier
    big-letter (small-letter | big-letter | digit)*

letter
    small-letter | big-letter | "-"

small-letter
    "a"_"z"

big-letter
    "A"_"Z" 

digit
    "0"_"9"


