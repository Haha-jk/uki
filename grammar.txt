

program  
    statement*

statement  
    container-statement
    expression-statement 
    loop-statement  
    when-statement  


container-statement
    container-declaration  
    container-retrieval

container-declaration 
    identifier parameters? ":" expression

container-retrieval
    identifier arguments?

parameters
    

arguments  
    expression ("," expression)*  

loop-statement  
    "loop" loop-range loop-variable? instruction-block  

loop-range  
    number  
    number "_" number  
    number "_" number "_" number  
    identifier  (* array, object, string iteration *)  

loop-variable  
    "with" identifier  
    "with" "[" identifier ("," identifier)* "]"  

when-statement  
    "when" expression instruction-block  
    "then" expression? instruction-block  

expression  
    value  
    identifier  
    math-operation  
    function-call  
    boolean-expression  
    interpolation  

value  
    number  
    string  
    boolean  

boolean  
    "right" | "wrong"  

string  
    '"' characters '"'  

number  
    digit+  

data-structure  
    array | object  

array  
    "[" expression-list? "]"  

object  
    "[" key-value-pair ("," key-value-pair)* "]"  

key-value-pair  
    string ":" expression  

instruction  
    "{" statement* "}"  
    indented-statements  

instruction-block  
    indented-statements  

math-operation  
    expression ("+" | "-" | "*" | "/") expression  
    "remainder" expression "," expression  
    "power" expression "," expression  

boolean-expression  
    expression comparison-operator expression  

comparison-operator  
    "=" | "!>" | "!<"  

logical-expression  
    expression ("&" | "?" | "!") expression  

interpolation  
    '"' characters* "|" expression "|" characters* '"'  

identifier  
    lowercase-word ("-" lowercase-word)*  

lowercase-word  
    lowercase-letter+  

lowercase-letter  
    "a" | "b" | "c" | ... | "z"  

function-definition  
    identifier parameters? ":" instruction-block  

parameters  
    identifier ("," identifier)*  

function-call  
    identifier arguments?  

indented-statements  
    indent statement* dedent






program
    declaration

declaration
    identifier ":" value


statement
    expression-statement            |
    loop-statement                  |
    when-statement                  |
    exit-statement                  |
    quit-statement                  |
    skip-statement                  |
    variable-reassignment-statement |
    function-reassignment-statement |
    block

block
    Indent declaration* Dedent

expression-statement
    expression header-end

exit-statement
    "exit" expression? header-end

quit-statement
    "exit" expression? header-end

skip-statement
    "exit" expression? header-end

expression
    logic-or

variable-assignment 
    ( call "." )? variable-identifier "=" expression

logic-or
    logic-and ( "?" logic-and )*

logic-and
    equality ( "&" equality )*

equality
    comparison ( ( "!=" | "=" ) comparison )*

comparison
    term ( ( ">" | ">!" | "<" | "!<" ) term )* 

term
    factor (("+" | "-") factor)*

factor
    unary (("*" | "/") unary)*

unary
    ("-" | "!") function-call

function-call
    primary arguments?

primary
    string | number | boolean | identifier

string
    single-line-string |
    multi-line-string
    
single-line-string 
    "\"" single-line-string-character* "\""

multi-line-string
    "\"" new-line (indent multi-line-string-character* dedent)? "\""

number
    integer-number | decimal-number

multi-line-string-character
    @ any printable character including escape-sequence

single-line-string-character
    @ any printable character including escape-sequence, excluding unescaped inverted commas and unescaped newline

escape-sequence
    "\\" ("\"" | "n" | "t" | "\\")

integer-number
    ("-")? digit+
 
decimal-number   
    ("-")? integer-number "." digit+

boolean 
    "right" | "wrong"

identifier
    function-identifier |
    variable-identifier |
    variable-identifier ("." variable-identifier)*

variable-identifier
    small-letter+ ("-" small-letter+ | digit*)*

function-identifier
    big-letter (small-letter | big-letter | digit)*

letter
    small-letter | big-letter | "-"

small-letter
    "a"_"z"

big-letter
    "A"_"Z" 

digit
    "0"_"9"


